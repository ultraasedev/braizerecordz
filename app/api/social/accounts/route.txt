import { verifyAuth } from "@/app/lib/auth";
import connectDB from "@/app/lib/mongodb";
import { ObjectId } from "mongodb";
import { NextRequest, NextResponse } from "next/server";

// app/api/social/accounts/route.ts
export async function GET(req: NextRequest) {
    try {
      // Vérifier l'authentification
      const authResult = await verifyAuth(req);
      if (!authResult) {
        return NextResponse.json({ error: "Non autorisé" }, { status: 401 });
      }
  
      // Connexion à la base de données
      const db = await connectDB();
      const socialAccountsCollection = new db.Collection("socialAccounts");
      
      // Récupérer les comptes de l'utilisateur
      const accounts = await socialAccountsCollection
        .find({ userId: new ObjectId(authResult.userId) })
        .sort({ platform: 1, createdAt: -1 })
        .toArray();
      
      // Masquer les tokens sensibles
      const safeAccounts = accounts.map((account: any) => ({
        ...account,
        accessToken: undefined,
        refreshToken: undefined
      }));
      
      return NextResponse.json(safeAccounts);
    } catch (error: any) {
      console.error("Erreur lors de la récupération des comptes:", error);
      return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
    }
  }
  
  export async function DELETE(req: NextRequest) {
    try {
      // Vérifier l'authentification
      const authResult = await verifyAuth(req);
      if (!authResult) {
        return NextResponse.json({ error: "Non autorisé" }, { status: 401 });
      }
  
      // Récupérer l'ID du compte à supprimer
      const data = await req.json();
      const accountId = data.id;
      
      if (!accountId) {
        return NextResponse.json({ error: "ID de compte manquant" }, { status: 400 });
      }
      
      // Connexion à la base de données
      const db = await connectDB();
      const socialAccountsCollection = new db.Collection("socialAccounts");
      
      // Vérifier que le compte appartient à l'utilisateur
      const account = await socialAccountsCollection.findOne({
        _id: new ObjectId(accountId),
        userId: new ObjectId(authResult.userId)
      });
      
      if (!account) {
        return NextResponse.json({ error: "Compte non trouvé" }, { status: 404 });
      }
      
      // Supprimer le compte
      await socialAccountsCollection.deleteOne({ _id: new ObjectId(accountId) });
      
      return NextResponse.json({ success: true });
    } catch (error: any) {
      console.error("Erreur lors de la suppression du compte:", error);
      return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
    }
  }