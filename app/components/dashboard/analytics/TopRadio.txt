// components/analytics/TopRadio.tsx
"use client"

import { useState } from 'react'
import Image from 'next/image'
import { Radio, TrendingUp, TrendingDown, Calendar, Volume2 } from 'lucide-react'
import { useStreamingData } from '@/app/hooks/useStreamingData'
import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import { cn } from "@/lib/utils"
import { PlatformType, type RadioPlay } from '@/app/types/streaming'

interface TopRadioProps {
  platforms: PlatformType[]
  region: string
}

export default function TopRadio({ platforms, region }: TopRadioProps) {
  const { data, isLoading, error } = useStreamingData<RadioPlay[]>('radio', {
    type: 'radio',
    platforms,
    region
  })


  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('fr-FR', {
      day: 'numeric',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit'
    }).format(new Date(date))
  }

  if (isLoading) {
    return (
      <div className="space-y-2 p-4">
        <Skeleton className="h-8 w-3/4" />
        <div className="space-y-2">
          {[...Array(3)].map((_, i) => (
            <Skeleton key={i} className="h-24 w-full" />
          ))}
        </div>
      </div>
    )
  }

  if (error || !data?.data) {
    return (
      <div className="p-4 text-center rounded-lg bg-zinc-900/50">
        <p className="text-zinc-400">Impossible de charger les donn√©es radio</p>
      </div>
    )
  }

  const radioPlays = data.data

  return (
    <Card className="bg-zinc-900/50 border-zinc-800 overflow-hidden">
      {/* Header */}
      <div className="p-4">
        <div className="flex items-center justify-between mb-2">
          <h2 className="text-xl font-bold text-white">Passages Radio</h2>
          <Radio className="w-5 h-5 text-zinc-400" />
        </div>
        <p className="text-sm text-zinc-400">Cette semaine sur les ondes</p>
      </div>

      {/* Radio Plays List */}
      <div className="divide-y divide-zinc-800">
        {radioPlays.map((play) => {
          const trend = play.currentPosition < play.lastWeekPosition
            ? { type: 'up', value: play.lastWeekPosition - play.currentPosition }
            : { type: 'down', value: play.currentPosition - play.lastWeekPosition }

          return (
            <div
              key={play.id}
              className="p-4 hover:bg-zinc-800/50 transition-colors"
            >
              {/* Mobile Layout */}
              <div className="flex flex-col sm:flex-row sm:items-center gap-4">
                {/* Image and Primary Info */}
                <div className="flex items-center gap-3">
                  <div className="relative w-12 h-12 flex-shrink-0">
                    <Image
                      src={play.image}
                      alt={play.name}
                      fill
                      className="object-cover rounded-md"
                    />
                  </div>
                  <div className="flex-1 min-w-0">
                    <h3 className="font-medium text-white truncate">{play.name}</h3>
                    <p className="text-sm text-zinc-400 truncate">{play.station}</p>
                  </div>
                </div>

                {/* Stats */}
                <div className="flex items-center justify-between sm:justify-end gap-4 mt-2 sm:mt-0 ml-auto">
                  {/* Plays */}
                  <div className="flex items-center gap-1.5">
                    <Volume2 className="w-4 h-4 text-zinc-500" />
                    <span className="text-sm text-zinc-400">{play.plays}</span>
                  </div>

                  {/* Trend Badge */}
                  <Badge
                    variant="outline"
                    className={cn(
                      "flex items-center gap-1",
                      trend.type === 'up' ? "text-green-500" : "text-red-500"
                    )}
                  >
                    {trend.type === 'up' ? (
                      <TrendingUp className="w-3 h-3" />
                    ) : (
                      <TrendingDown className="w-3 h-3" />
                    )}
                    <span>{trend.value}</span>
                  </Badge>

                  {/* Last Play - Hidden on mobile */}
                  <div className="hidden sm:flex items-center gap-1.5">
                    <Calendar className="w-4 h-4 text-zinc-500" />
                    <span className="text-sm text-zinc-400">
                      {formatDate(play.lastPlay)}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )
        })}
      </div>
    </Card>
  )
}