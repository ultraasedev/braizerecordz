// components/dashboard/analytics/TrendingArtists.tsx
"use client"

import { useState } from 'react'
import Image from 'next/image'
import { useStreamingData } from '@/app/hooks/useStreamingData'
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Skeleton } from "@/components/ui/skeleton"
import { Badge } from "@/components/ui/badge"
import { 
  TrendingUp, 
  Heart, 
  Music2, 
  PlayCircle, 
  ExternalLink 
} from 'lucide-react'
import { Artist, PlatformType } from '@/app/types/streaming'
import { cn } from "@/lib/utils"

interface TrendingArtistsProps {
  platforms: PlatformType[]
  searchQuery?: string
  region?: string
}

const PLATFORM_COLORS = {
  spotify: 'text-green-500',
  deezer: 'text-purple-500',
  youtube: 'text-red-500',
  lastfm: 'text-red-600',
  jamendo: 'text-blue-500'
} as const

export default function TrendingArtists({
  platforms,
  searchQuery = '',
  region = 'FR'
}: TrendingArtistsProps) {
  const [view, setView] = useState<'grid' | 'list'>('grid')

  const { data, isLoading, error } = useStreamingData<Artist[]>('trending', {
    type: 'trending',
    platforms,
    region,
    query: searchQuery
  })
  
  const formatNumber = (num: number) => {
    if (num >= 1_000_000) return `${(num / 1_000_000).toFixed(1)}M`
    if (num >= 1_000) return `${(num / 1_000).toFixed(1)}k`
    return num.toLocaleString()
  }

  if (isLoading) {
    return (
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        {[...Array(8)].map((_, i) => (
          <Skeleton key={i} className="h-[240px] w-full" />
        ))}
      </div>
    )
  }

  if (error || !data?.data) {
    return (
      <Card className="p-6 text-center">
        <p className="text-zinc-400">
          Impossible de charger les artistes en tendance
        </p>
      </Card>
    )
  }

  const artists = data.data

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-lg font-semibold text-white">
            Artistes en Tendance
          </h2>
          <p className="text-sm text-zinc-400">
            Les artistes qui montent cette semaine
          </p>
        </div>
        
        <div className="flex items-center gap-2">
          <Button
            variant={view === 'grid' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setView('grid')}
            className="hidden sm:flex"
          >
            <PlayCircle className="w-4 h-4 mr-2" />
            Grid
          </Button>
          <Button
            variant={view === 'list' ? 'default' : 'outline'}
            size="sm"
            onClick={() => setView('list')}
            className="hidden sm:flex"
          >
            <Music2 className="w-4 h-4 mr-2" />
            Liste
          </Button>
        </div>
      </div>

      {view === 'grid' ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {artists.map((artist) => (
            <Card
              key={artist.id}
              className="group relative flex flex-col overflow-hidden 
                       hover:border-zinc-700 transition-colors"
            >
              {/* Image Container */}
              <div className="relative w-full pt-[100%]">
                <Image
                  src={artist.image || '/placeholder-artist.jpg'}
                  alt={artist.name}
                  fill
                  className="object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent 
                              opacity-0 group-hover:opacity-100 transition-opacity" />
              </div>

              {/* Content */}
              <div className="p-4 space-y-3">
                <div>
                  <h3 className="font-medium text-white truncate">
                    {artist.name}
                  </h3>
                  {artist.topTracks[0] && (
                    <p className="text-sm text-zinc-400 truncate">
                      {artist.topTracks[0].title}
                    </p>
                  )}
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-sm text-zinc-400">
                    {formatNumber(artist.totalPlays)} plays
                  </span>
                  <Badge
                    variant="outline"
                    className={cn(
                      "flex items-center gap-1",
                      artist.weeklyGrowth > 0 ? "text-green-500" : "text-red-500"
                    )}
                  >
                    <TrendingUp className="w-3 h-3" />
                    {artist.weeklyGrowth}%
                  </Badge>
                </div>
              </div>

              {/* Favorite Button */}
              <Button
                variant="ghost"
                size="icon"
                className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 
                         transition-opacity"
                onClick={() => {/* Toggle favorite */}}
              >
                <Heart
                  className={cn(
                    "w-5 h-5",
                    artist.isFavorite ? "fill-red-500 text-red-500" : "text-white"
                  )}
                />
              </Button>
            </Card>
          ))}
        </div>
      ) : (
        <div className="space-y-2">
          {artists.map((artist) => (
            <Card
              key={artist.id}
              className="group flex items-center gap-4 p-4 hover:bg-zinc-800/50 transition-colors"
            >
              <div className="relative w-16 h-16 flex-shrink-0">
                <Image
                  src={artist.image || '/placeholder-artist.jpg'}
                  alt={artist.name}
                  fill
                  className="object-cover rounded-md"
                />
              </div>

              <div className="flex-1 min-w-0">
                <h3 className="font-medium text-white truncate">{artist.name}</h3>
                {artist.topTracks[0] && (
                  <p className="text-sm text-zinc-400 truncate">
                    {artist.topTracks[0].title}
                  </p>
                )}
                <div className="flex items-center gap-4 mt-1">
                  <span className="flex items-center gap-1 text-sm text-zinc-500">
                    <Music2 className="w-4 h-4" />
                    {formatNumber(artist.totalFollowers)} followers
                  </span>
                  <Badge
                    variant="outline"
                    className={cn(
                      "flex items-center gap-1",
                      artist.weeklyGrowth > 0 ? "text-green-500" : "text-red-500"
                    )}
                  >
                    <TrendingUp className="w-3 h-3" />
                    {artist.weeklyGrowth}%
                  </Badge>
                </div>
              </div>

              <Button
                variant="ghost"
                size="icon"
                className="opacity-0 group-hover:opacity-100 transition-opacity"
                onClick={() => {/* Toggle favorite */}}
              >
                <Heart
                  className={cn(
                    "w-5 h-5",
                    artist.isFavorite ? "fill-red-500 text-red-500" : "text-white"
                  )}
                />
              </Button>
            </Card>
          ))}
        </div>
      )}
    </div>
  )
}