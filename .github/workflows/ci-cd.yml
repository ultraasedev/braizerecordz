name: CI/CD Pipeline

# Déclenche le workflow à chaque push sur la branche main
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest  # Utilise une machine virtuelle Ubuntu

    steps:
      # Étape 1 : Récupère le code du dépôt GitHub
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configure Docker Buildx pour construire l'image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Étape 3 : Se connecte à Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}  # Utilise le secret GitHub
          password: ${{ secrets.DOCKER_HUB_TOKEN }}     # Utilise le secret GitHub

      # Étape 4 : Construit et pousse l'image Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .  # Utilise le répertoire courant
          push: true  # Pousse l'image sur Docker Hub
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/votre-repo:latest  # Tag de l'image

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Attend que l'étape de build soit terminée

    steps:
      # Étape 5 : Se connecte au VPS via IP, host, utilisateur et mot de passe (tout en secrets GitHub)
      - name: Connect to VPS and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}       # Hostname du VPS (stocké dans les secrets GitHub)
          username: ${{ secrets.VPS_USERNAME }}  # Utilisateur du VPS (stocké dans les secrets GitHub)
          password: ${{ secrets.VPS_PASSWORD }}  # Mot de passe du VPS (stocké dans les secrets GitHub)
          script: |
            # Télécharge la dernière image Docker
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/braizerecords:latest

            # Arrête et supprime les anciens conteneurs
            docker-compose down

            # Démarre les nouveaux conteneurs
            docker-compose up -d